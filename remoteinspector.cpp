/////////////////////////////////////////////////////////////////////////////
// Name:        remoteinspector.cpp
// Purpose:     
// Author:      Vamarc Raelonda
// Modified by: 
// Created:     22/07/2007 20:18:54
// RCS-ID:      
// Copyright:   (c) Vamarc Raelonda and Resonance Microwave Systems
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 22/07/2007 20:18:54

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "remoteinspector.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "remoteinspector.h"

////@begin XPM images
////@end XPM images



extern "C"
{
#include "remoteFirmware.h"

    extern int gDip;
    extern uint16_t    appTimers[NUM_APP_TIMERS];
}



/*!
 * wxMainRemoteDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( wxMainRemoteDialog, wxDialog  )


/*!
 * wxMainRemoteDialog event table definition
 */

BEGIN_EVENT_TABLE( wxMainRemoteDialog, wxDialog )

////@begin wxMainRemoteDialog event table entries
    EVT_CHECKBOX( XRCID("ID_CK__LOW_BATTERY"), wxMainRemoteDialog::OnCkLowBatteryClick )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_1"), wxMainRemoteDialog::OnBtSlowTimer1Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_2"), wxMainRemoteDialog::OnBtSlowTimer2Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_3"), wxMainRemoteDialog::OnBtSlowTimer3Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_4"), wxMainRemoteDialog::OnBtSlowTimer4Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_5"), wxMainRemoteDialog::OnBtSlowTimer5Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_6"), wxMainRemoteDialog::OnBtSlowTimer6Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_7"), wxMainRemoteDialog::OnBtSlowTimer7Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_8"), wxMainRemoteDialog::OnBtSlowTimer8Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_9"), wxMainRemoteDialog::OnBtSlowTimer9Click )
    EVT_BUTTON( XRCID("ID_BT__SLOW_TIMER_10"), wxMainRemoteDialog::OnBtSlowTimer10Click )
    EVT_BUTTON( XRCID("ID_BT__RESET"), wxMainRemoteDialog::OnBtResetClick )
    EVT_BUTTON( XRCID("ID_BT__CLEAR"), wxMainRemoteDialog::OnBtClearClick )
    EVT_BUTTON( XRCID("ID_BT__SAVE"), wxMainRemoteDialog::OnBtSaveClick )
    EVT_BUTTON( XRCID("ID_BT__CLOSE"), wxMainRemoteDialog::OnBtCloseClick )

////@end wxMainRemoteDialog event table entries

END_EVENT_TABLE()


/*!
 * wxMainRemoteDialog constructors
 */

wxMainRemoteDialog::wxMainRemoteDialog()
{
    Init();
    m_lowBattery = 0;
}

wxMainRemoteDialog::wxMainRemoteDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * wxMainRemoteDialog creator
 */

bool wxMainRemoteDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin wxMainRemoteDialog creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    SetParent(parent);
    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end wxMainRemoteDialog creation
    return true;
}


/*!
 * wxMainRemoteDialog destructor
 */

wxMainRemoteDialog::~wxMainRemoteDialog()
{
////@begin wxMainRemoteDialog destruction
////@end wxMainRemoteDialog destruction
}


/*!
 * Member initialisation
 */

void wxMainRemoteDialog::Init()
{
////@begin wxMainRemoteDialog member initialisation
    m_dipSwitchTxt = NULL;
    m_slowTimer1Txt = NULL;
    m_slowTimer2Txt = NULL;
    m_slowTimer3Txt = NULL;
    m_slowTimer4Txt = NULL;
    m_slowTimer5Txt = NULL;
    m_slowTimer6Txt = NULL;
    m_slowTimer7Txt = NULL;
    m_slowTimer8Txt = NULL;
    m_slowTimer9Txt = NULL;
    m_slowTimer10Txt = NULL;
////@end wxMainRemoteDialog member initialisation
//CreateControls();


}


/*!
 * Control creation for wxMainRemoteDialog
 */

void wxMainRemoteDialog::CreateControls()
{    
////@begin wxMainRemoteDialog content construction
    // Generated by DialogBlocks, 22/07/2007 22:21:29 (unregistered)
    FILE * dipFile_h;
    char buf[32] = {"00"};

    if (!wxXmlResource::Get()->LoadDialog(this, GetParent(), _T("ID_WX_MAIN_REM_DIALOG")))
        wxLogError(wxT("Missing wxXmlResource::Get()->Load() in OnInit()?"));
    m_dipSwitchTxt = XRCCTRL(*this, "ID_ED__DIP_SWITCH", wxTextCtrl);
    m_logTxt = XRCCTRL(*this, "ID_ED__LOG", wxTextCtrl);
    m_slowTimer1Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_1", wxTextCtrl);
    m_slowTimer2Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_2", wxTextCtrl);
    m_slowTimer3Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_3", wxTextCtrl);
    m_slowTimer4Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_4", wxTextCtrl);
    m_slowTimer5Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_5", wxTextCtrl);
    m_slowTimer6Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_6", wxTextCtrl);
    m_slowTimer7Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_7", wxTextCtrl);
    m_slowTimer8Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_8", wxTextCtrl);
    m_slowTimer9Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_9", wxTextCtrl);
    m_slowTimer10Txt = XRCCTRL(*this, "ID_ED__SLOW_TIMER_10", wxTextCtrl);
    // Connect events and objects
    FindWindow(XRCID("ID_ED__DIP_SWITCH"))->Connect(XRCID("ID_ED__DIP_SWITCH"), wxEVT_LEAVE_WINDOW, wxMouseEventHandler(wxMainRemoteDialog::OnLeaveWindow), NULL, this);
////@end wxMainRemoteDialog content construction

    // Create custom windows not generated automatically here.
////@begin wxMainRemoteDialog content initialisation
////@end wxMainRemoteDialog content initialisation

    dipFile_h = fopen("dip.txt", "r");
    if (dipFile_h)
    {
        fscanf(dipFile_h, "%x", &gDip);
        sprintf(buf, "%X", (int) gDip & 0x000000ff);
        fclose(dipFile_h);
    }

        m_dipSwitchTxt->AppendText( (const wxChar *) buf );
}


/*!
 * Should we show tooltips?
 */

bool wxMainRemoteDialog::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap wxMainRemoteDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxMainRemoteDialog bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end wxMainRemoteDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon wxMainRemoteDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxMainRemoteDialog icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end wxMainRemoteDialog icon retrieval
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CK__OUT_OF_RANGE
 */

void wxMainRemoteDialog::OnCkLowBatteryClick( wxCommandEvent& event )
{
//IsChecked()
        if (m_lowBattery) m_lowBattery = 0;
        else m_lowBattery = 1;
}


/*!
 * wxEVT_LEAVE_WINDOW event handler for ID_ED__DIP_SWITCH
 */

void wxMainRemoteDialog::OnLeaveWindow( wxMouseEvent& event )
{
////@begin wxEVT_LEAVE_WINDOW event handler for ID_ED__DIP_SWITCH in wxMainRemoteDialog.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_LEAVE_WINDOW event handler for ID_ED__DIP_SWITCH in wxMainRemoteDialog. 
}


void wxMainRemoteDialog::OnBtSlowTimer1Click( wxCommandEvent& event ) { if (appTimers[0]) appTimers[0] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer2Click( wxCommandEvent& event ) { if (appTimers[1]) appTimers[1] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer3Click( wxCommandEvent& event ) { if (appTimers[2]) appTimers[2] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer4Click( wxCommandEvent& event ) { if (appTimers[3]) appTimers[3] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer5Click( wxCommandEvent& event ) { if (appTimers[4]) appTimers[4] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer6Click( wxCommandEvent& event ) { if (appTimers[5]) appTimers[5] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer7Click( wxCommandEvent& event ) { if (appTimers[6]) appTimers[6] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer8Click( wxCommandEvent& event ) { if (appTimers[7]) appTimers[7] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer9Click( wxCommandEvent& event ) { if (appTimers[8]) appTimers[8] = 1; }
void wxMainRemoteDialog::OnBtSlowTimer10Click( wxCommandEvent& event ) { if (appTimers[9]) appTimers[9] = 1; }


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__RESET
 */

void wxMainRemoteDialog::OnBtResetClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__RESET in wxMainRemoteDialog.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__RESET in wxMainRemoteDialog. 
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__CLEAR
 */

void wxMainRemoteDialog::OnBtClearClick( wxCommandEvent& event )
{
    m_logTxt->SetValue( (const wxChar *) "");
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__SAVE
 */

void wxMainRemoteDialog::OnBtSaveClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__SAVE in wxMainRemoteDialog.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__SAVE in wxMainRemoteDialog. 
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BT__CLOSE
 */

void wxMainRemoteDialog::OnBtCloseClick( wxCommandEvent& event )
{
    Show(false);
}

void wxMainRemoteDialog::log(const wxChar * msg)
{
    m_logTxt->AppendText( (const wxChar *) msg );
    m_logTxt->AppendText( (const wxChar *)"\r\n" );
}

